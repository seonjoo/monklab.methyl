#' DMN methylation preprocessing
#'
#' @param idatpath
#' @param targetfile
#' @param probthresh
#' @param outfilename
#'
#' @return The resulting beta
#' @export
#' @import minfi ENmix limma reshape scales sva DMRcate
#' @examples
#'
monk_proc_v1<-function(idatpath,
                    targetfile,
                    probthresh=0.01, # p.detect threshold of the bad probes
                    outfilename='monkproc_v1'
                    ){


  # Epi 450K Data Pre-processing
  #June 10, 2021
  # By Pamela Scorza

  library(minfi) # popular package for methylation data
  library(matrixStats) # for calculating summary statistics
  library(ENmix) # probe type adjustment "rcp"
  library(limma) # for MDS plots
  library(reshape, scales) # reshape data and graphig
  library(sva) # for addressing batch effects
  library(DMRcate)
  library(shinyMethyl)
  #devtools::install_github("hhhh5/ewastools")
  library(ewastools)
  library(stringi)
  library(magrittr)
  library(data.table)
  library(svd)
  library(readxl)
  library(tibble)



  ## Version 1 monk preprocessing
  ## Last update: 2022 04 08

  ######################################################################
  ###################Reading in idat files##############################
  ######################################################################
  WB <- read.metharray.exp(base=idatPath, targets=targetfile, verbose=T) # read the idat file one by one
  ncol(WB)


  ##############QUALITY CONTROL#################3

  ewas_meth <- read_idats( paste(idatPath,'/',targetfile$Basename,sep=''), quiet=F)
  ###################ILLUMINA QC Control Check#########3

  # The name of the platform (450K/EPIC)
  cat(paste('Platform:', ewas_meth$platform,'\n'))

  #Looking for failed samples
  targetfile$failed <- sample_failure(control_metrics(ewas_meth))

  cat('Number of Failed samples\n')
  table(targetfile$failed, useNA='ifany')
  print(targetfile %>% filter(failed==TRUE))


  #' Here we see that two samples failed: 9285451058_R01C01 and 9285451058_R06C02
  if (sum(targetfile$failed==TRUE)>0){
    re=lapply(targetfile$Basename[targetfile$failed==TRUE], function(str){
      tmp=control_metrics(read_idats(paste(idatPath,'/',str,sep=''), quiet=TRUE))
      tmpdat=as.data.frame(tmp)
      row.names(tmpdat)=str
      return(list(tmp,tmpdat))
    })

    # below threshold will be considered as problematic.
    contromat=data.frame(threshold=(unlist(lapply(re[[1]][[1]], attributes))),
               t(do.call(rbind, lapply(re,function(xx)xx[[2]]))))
    contromat_count = apply(as.matrix(contromat[,-1]),2, function(x)sum(x<contromat[,1]))
    paste(names(contromat)[-1], contromat_count)

    failedindx = which(targetfile$failed==TRUE)
    cat(paste('Excluded Failed Sample: ',targets$Basename[failedindx], '\n'))

    WB <- WB[,-which(targetfile$failed==TRUE)]
    targetfile=targetfile[-which(targetfile$failed==TRUE),]
  }

    cat(paste('Number of methylation data:',ncol(WB),'\n'))


  # Preprocess the data - this removes technical variation

  # "Normal out of band background" (Noob) within-sample correction - see [Triche et al 2013](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3627582/)

  WB.noob <- preprocessNoob(WB)


  # Distribution of beta-values: before and after noob normalization

  #############FIGURE 1######################
  #' Distribution of beta-values: before and after noob normalization
  #+ fig.width=8, fig.height=6, dpi=300
  densityPlot(WB, main = "density plots before and after preprocessing", pal="#440154FF", ylim=c(0,4.5))
  densityPlot(WB.noob, add = F, pal = "#FDE725FF")
  # Add legend
  legend("topleft", c("Noob","Raw"),
         lty=c(1,1), title="Normalization",
         bty='n', cex=1.3, col=c("#FDE725FF","#440154FF"))
  #' notice the blue density traces (raw) are more spread out; background correction brings them together
  #'

  ## Remove Bad/Failed Probe

  # We want to drop probes with intensity that is not significantly above background signal (from negative control probes)

  # probe failures due to low intensities

  # So, high p-values can be interpreted as "not different from background" (i.e. "no bueno")


  detect.p <- minfi::detectionP(WB, type = "m+u")
  #detect.p2 <- ewastools::detectionP(ewas_meth) #this is the other way to do detection p-value, using ewastools. Really, it's whatever you feel like doing. Note that you need the ewastools version of the file, not the WB file
  #save.image('/Volumes/ALSPAC/EPI/Monk_DNA_Methylation_data_Sameera_2022_01_20/epi_epic_placenta_preprocessed_2022_02_24.Rdata')

  cat(paste(max(colSums(detect.p > 0.01))),'probes undetected per sample if we use 10^-2 cutoff\n')

  cat(paste(max(colSums(detect.p > 0.000001))),'probes undetected per sample if we use 10^-6 cutoff\n')

  # Barplot of the mean detection p-value by sample
  #############FIGURE 2######################
  #'Barplot of the mean detection p-value by sample
  #'This tells us something (??) about the sample
  barplot(colMeans(detect.p), col=rainbow(dim(detect.p)[2]), las=2, cex.names=0.7, main="Mean detection P by sample",cex.axis=0.8, ylim=c(0,7e-4))
  #Saved this as 40*20

  # Restrict data to good probes only:

  detect.p[detect.p > probthresh] <- NA
  detect.p <- na.omit(detect.p)
  intersect <- intersect(rownames(getAnnotation(WB)), rownames(detect.p))


  cat(paste('Started with', nrow(getAnnotation(WB)), 'probes and', length(intersect),' remaining if we use', probthresh,'as cutoff. Removed',nrow(getAnnotation(WB))-length(intersect),'probes', round(100 - length(intersect)/nrow(getAnnotation(WB))*100,2), '%'))


  # Filter bad probes from our methylset

  nrow(WB.noob)
  WB.noob <- WB.noob[rownames(getAnnotation(WB.noob)) %in% intersect,]
  nrow(WB.noob)
  rm(intersect, detect.p); gc() # cleanup

  ######################################################################
  #####################Probe type adjustment############################
  ######################################################################

  #' Need to adjust for probe-type bias Infinium I (type I) and Infinium II (type II) probes
  #' RCP with EnMix: Regression on Correlated Probes [Niu et al. Bioinformatics 2016](http://www.ncbi.nlm.nih.gov/pubmed/27153672)
  betas.rcp <- rcp(WB.noob)
  #' note that this package takes beta values out of the minfi object - result is a matrix



  ## Annotation of Infinium type for each probe (I vs II)
  typeI <-   minfi::getProbeInfo(WB.noob,type="I")$Name
  typeII <-  minfi::getProbeInfo(WB.noob,type="II")$Name
  onetwo <- rep(1, nrow(betas.rcp))
  onetwo[rownames(betas.rcp) %in% typeII] <- 2


  #' Probe-type bias adjustment before and after RCP
  #+ fig.width=15, fig.height=7, dpi=300
  par(mfrow=c(1,2)) # Side-by-side density distributions
  densityPlot(WB.noob[rownames(getAnnotation(WB.noob)) %in% typeI,],pal = "#FDE725FF",main='Beta density',ylim=c(0,6.5))
  densityPlot(WB.noob[rownames(getAnnotation(WB.noob)) %in% typeII,],add = F, pal = "#440154FF")
  densityPlot(betas.rcp[rownames(getAnnotation(WB.noob)) %in% typeI,],pal = "#FDE725FF",main='Beta density probe-type adjusted',ylim=c(0,6.5))
  densityPlot(betas.rcp[rownames(getAnnotation(WB.noob)) %in% typeII,],add = F, pal = "#440154FF")
  legend("center", c("Infinium I","Infinium II"),
         lty=c(1,1), title="Infinium type",
         bty='n',col=c("#FDE725FF","#440154FF"))
  #' notice that the type I and II peaks are more closely aligned after rcp adjustment
  #' (particularly in the higher peak)
  rm(onetwo, typeI, typeII)

  ## Batch effects

  ######################################################################
  ###########################Batch effects##############################
  ######################################################################

  #' ## Batch effects
  #' This can create batch effects (technical variation) with different intensities by position (row effect).
  #' Other commonly observed batch effects include bisulfite processing plate, chip, and processing date.

  #' We will test 3 potential factors
  pData(WB.noob)$Sentrix_ID <- unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][1]))
  pData(WB.noob)$array_row <- substring(unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][2])),1,3) #Chip row
  pData(WB.noob)$array_col <- substring(unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][2])),4,7) #Chip row #Chip position
  #and just chip (Sentrix_ID)

  #' ## Principal Component Analysis (PCA)
  #' Calculate major sources of variability of DNA methylation using PCA
  PCobject <- prcomp(t(betas.rcp), retx = T, center = T, scale. = T)
  #' Extract the Principal Components from SVD
  PCs <- PCobject$x

  #' Is the major source of variability associated with position on chip?
  summary(lm(PCs[, 1] ~ pData(WB.noob)$array_row)) #some effects w/row
  #summary(lm(PCs[, 1] ~ pData(WB.noob)$array_col)) #no effects w/col
  oneway.test(PCs[, 1] ~ as.factor(pData(WB.noob)$Sentrix_ID)) #
  oneway.test(PCs[, 1] ~ as.factor(pData(WB.noob)$array_row)) #

  boxplot(PCs[, 1] ~ pData(WB.noob)$array_row, ylab = "PC1",las=2, main="Row",col=rainbow(8))

  #' ComBat eBayes adjustment using a known variable of interest (here we use row)
  Mvals <- log2(betas.rcp)-log2(1-betas.rcp)
  Mvals.ComBat <- ComBat(Mvals, batch = pData(WB.noob)$array_row)
  betas.rcp <- 2^Mvals.ComBat/(1+2^Mvals.ComBat) # Convert M-values back to beta-values

  #' PCA after removing batch effects
  PC_post_row_correction <- prcomp(t(betas.rcp), retx = T, center = T, scale. = T)
  PC1_post_row_correction <- PC_post_row_correction$x

  summary(lm(PC1_post_row_correction[, 1] ~ pData(WB.noob)$array_row)) #some effects w/row
  #summary(lm(PC1_post_row_correction[, 1] ~ pData(WB.noob)$array_col)) #no effects w/col
  oneway.test(PC1_post_row_correction[, 1] ~ as.factor(pData(WB.noob)$Sentrix_ID)) #

  #par(mfrow = c(1, 2))
  boxplot(PC1_post_row_correction[, 1] ~ pData(WB.noob)$array_row, ylab = "PC1",las=2, main="Row",col=rainbow(8))
  #boxplot(PC1_post_row_correction[, 1] ~ pData(WB.noob)$array_col, ylab = "PC1",las=2, main="Column",col=rainbow(8))

  #'By Beadchip
  par(mfrow = c(1, 1))
  boxplot(PC1_post_row_correction[, 1] ~ pData(WB.noob)$Sentrix_ID, ylab = "PC1",las=2, main="Chip",col=rainbow(8))


  rm(PCs, PCobject, PC_post_row_correction, PC1_post_row_correction); gc()


  ######################################################################
  ########################Cross-Hybridizing#############################
  ######################################################################

  betas.clean <- rmSNPandCH(betas.rcp,  mafcut = 0.05, and = TRUE, rmcrosshyb = TRUE, rmXY= FALSE)
  Mvals.clean <- log2(betas.clean)-log2(1-betas.clean)

  #saveRDS(betas.clean, file = "tcell_epic_n152_veronica_pamela_clean_betas.rds")
  #saveRDS(Mvals.clean, file = "tcell_epic_n152_veronica_pamela_Clean_mvals.rds")

  save(betas.clean, targetfile, file = outfilename)

}
