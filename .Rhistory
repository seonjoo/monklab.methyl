facet_grid(~variable, ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(y=value)) +
geom_point(aes(colour=failed)) +
facet_grid(~variable, ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(y=value)) +
geom_boxplot() +
facet_grid(~variable, ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(value)) +
geom_boxplot() +
facet_grid(~variable, ncol=9)
help(geom_boxplot)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(value)) +
geom_boxplot() +
facet_grid(.~variable, ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count'))
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(x=failed,y=value)) +
geom_boxplot() +
facet_grid(.~variable, ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(x=failed,y=value)) +
geom_boxplot()
help(facet_grid)
help(facet_wrap)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(x=failed,y=value)) +
geom_boxplot() +
facet_wrap(.~variable,scales = "free", ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(x=failed,y=value)) +
geom_point() +
facet_wrap(.~variable,scales = "free", ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point() +
facet_wrap(.~variable,scales = "free", ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point(aes(x=1)) +
facet_wrap(.~variable,scales = "free", ncol=9)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point(aes(x=1)) +
facet_wrap(.~variable,scales = "free", ncol=6)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point(aes(x=1)) +
facet_wrap(.~variable,scales = "free", ncol=6) +
geom_hline(data=threshold, aes(yintercept=value))
threshold
threshold$variable=gsub('.threshold','',threshold$variable)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point(aes(x=1)) +
facet_wrap(.~variable,scales = "free", ncol=6) +
geom_hline(data=threshold, aes(yintercept=value))
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point(aes(x=1)) +
facet_wrap(.~variable,scales = "free", ncol=6) +
geom_hline(data=threshold, aes(yintercept=value, col='red'))
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point(aes(x=1)) +
facet_wrap(.~variable,scales = "free", ncol=6) +
geom_hline(data=threshold, aes(yintercept=value), colour='red')
#' Here we see that two samples failed: 9285451058_R01C01 and 9285451058_R06C02
if (sum(targetfile$failed==TRUE)>0){
# below threshold will be considered as problematic.
threshold=t(unlist(lapply(cmat, attributes))) %>% data.frame(.) %>% reshape2::melt(.)
contromat=data.frame(id=targetfile$Basename,
failed = targetfile$failed,
failed.count = apply(as.matrix(data.frame(cmat)),1, function(x)sum(x<threshold$value)),
data.frame(cmat))
#paste(names(contromat)[-1], contromat_count)
failedindx = which(targetfile$failed==TRUE)
cat(paste('Failed Sample Index: ',failedindx, '\n'))
threshold$variable=gsub('.threshold','',threshold$variable)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point(aes(x=1)) +
facet_wrap(.~variable,scales = "free", ncol=6) +
geom_hline(data=threshold, aes(yintercept=value), colour='red')
}
kable(contromat %>% filter(failed==TRUE))
knitr::kable(contromat %>% filter(failed==TRUE))
knitr::kable(contromat %>% filter(failed==TRUE), digits=3)
knitr::kable(contromat %>% filter(failed==TRUE), digits=2)
contromat
t(contromat)
contromat
t(treshold$value)
t(threshold$value)
threshold
threshold=t(unlist(lapply(cmat, attributes))) %>% data.frame(.)
threshold
t(unlist(lapply(cmat, attributes)))
contromat
knitr::kable(contromat %>% filter(failed==TRUE) , digits=2)
t(contromat %>% filter(failed==TRUE))
knitr::kable(contromat %>% filter(failed==TRUE) , digits=2)
knitr::kable(t(contromat %>% filter(failed==TRUE)) , digits=2)
knitr::kable(t(contromat %>% filter(failed==TRUE)) , digits=2, full=FALSE)
# below threshold will be considered as problematic.
threshold=t(unlist(lapply(cmat, attributes))) %>% data.frame(.) %>% reshape2::melt(.)
threshold
cbind(t(contromat %>% filter(failed==TRUE)), c('threshold', '',' ',threshold$value))
knitr::kable(cbind(t(contromat %>% filter(failed==TRUE)), c('threshold', '',' ',threshold$value)) , digits=2, full=FALSE)
knitr::kable(cbind(t(contromat %>% mutate(value=round(value,2)) %>% filter(failed==TRUE)),
c('threshold', '',' ',threshold$value)) , digits=2, full=FALSE)
head(contromat)
knitr::kable(cbind(t(contromat %>% filter(failed==TRUE)),
c('threshold', '',' ',threshold$value)) , digits=2, full=FALSE)
library(shinyMethyl)
ewas_meth
summaryqc <- shinySummarize(ewas_meth)
View(targetfile)
View(ewas_meth)
View(ewas_meth)
WB <- read.metharray.exp(base=idatPath, targets=targetfile, verbose=T)
WB
getqc(WB)
qc <- getQC(MSet)
qc <- getQC(WB)
MSet <- preprocessRaw(WB)
qc <- getQC(MSet)
head(qc)
plotQC(qc)
predictedSex <- getSex(WB, cutoff = -2)$predictedSex
RSet <- ratioConvert(MSet, what = "both", keepCN = TRUE)
GRset <- mapToGenome(RSet)
predictedSex <- getSex(WB, cutoff = -2)$predictedSex
predictedSex <- getSex(GRset, cutoff = -2)$predictedSex
predictedSex
targetfile
targets <- readxl::read_excel("/Volumes/ALSPAC/EPI/EPI_methylation_rawdata_froam_ben_2019_12_20/monk_sample_450K_placenta.xlsx")
View(targets)
qc
plotQC(qc)
help*plotQC
help(plotQC)
out <- minfiQC(MSet)
out
targetfile
shinyMethyl
out
plotQC(out)
help(plotQC)
plotQC(out$qc)
help(plotQC)
plotQC(out$qc)
a=plotQC(out$qc)
a
plotQC
out$qc
out$qc
out$qc = out$qc %>%
mutate(meds <- (mMed + uMed)/2) %>%
mutate(bad = fielse(meds < 10.5,'Fail','Pass')
predictedSex <- getSex(GRset, cutoff = -2)$predictedSex
if (quiet==F){
ewas_meth<-invisible(read_idats( paste(idatPath,'/',targetfile$Basename,sep=''), quiet=quiet))
}else{
ewas_meth<-read_idats( paste(idatPath,'/',targetfile$Basename,sep=''), quiet=T)
}
###################ILLUMINA QC Control Check#########3
# The name of the platform (450K/EPIC)
cat(paste('Platform:', ewas_meth$platform,'\n'))
#Looking for failed samples
cmat = control_metrics(ewas_meth)
targetfile$failed <- sample_failure(cmat)
cat(paste('Number of Failed samples:',sum(targetfile$failed==TRUE),'out of ',nrow(targetfile),'samples. \n'))
#  print(data.frame(contromat)[targetfile$failed==TRUE,])
#' Here we see that two samples failed: 9285451058_R01C01 and 9285451058_R06C02
if (sum(targetfile$failed==TRUE)>0){
# below threshold will be considered as problematic.
threshold=t(unlist(lapply(cmat, attributes))) %>% data.frame(.) %>% reshape2::melt(.)
contromat=data.frame(id=targetfile$Basename,
failed = targetfile$failed,
failed.count = apply(as.matrix(data.frame(cmat)),1, function(x)sum(x<threshold$value)),
data.frame(cmat))
#paste(names(contromat)[-1], contromat_count)
failedindx = which(targetfile$failed==TRUE)
cat(paste('Failed Sample Index: ',failedindx, '\n'))
threshold$variable=gsub('.threshold','',threshold$variable)
contromat %>%
reshape2::melt(., id=c('id','failed','failed.count')) %>%
ggplot(., aes(colour=failed,y=value)) +
geom_point(aes(x=1)) +
facet_wrap(.~variable,scales = "free", ncol=6) +
geom_hline(data=threshold, aes(yintercept=value), colour='red')
knitr::kable(cbind(t(contromat %>% filter(failed==TRUE)),
c('threshold', '',' ',threshold$value)) , digits=2, full=FALSE)
}
summaryqc <- shinySummarize(ewas_meth)
#' Visualize qc with shinyMethyl
runShinyMethyl(summaryqc)
}
)
out$qc = out$qc %>%
mutate(meds <- (mMed + uMed)/2) %>%
mutate(bad = fielse(meds < 10.5,'Fail','Pass'))
mingi.qc = data.frame(out$qc)
mingi.qc
mingi.qc = data.frame(out$qc) %>%
mutate(meds <- (mMed + uMed)/2) %>%
mutate(bad = fielse(meds < 10.5,'Fail','Pass'))
mingi.qc = data.frame(out$qc) %>%
mutate(meds <- (mMed + uMed)/2) %>%
mutate(bad = ifelse(meds < 10.5,'Fail','Pass'))
mingi.qc = data.frame(out$qc) %>%
mutate(meds <- (mMed + uMed)/2) %>%
mutate(bad = elseif(meds < 10.5,'Fail','Pass'))
library(dplyr)
help(ifelse)
help(elseif)
mingi.qc = data.frame(out$qc) %>%
mutate(meds <- (mMed + uMed)/2) %>%
mutate(bad = ifelse(meds < 10.5,'Fail','Pass'))
mingi.qc = data.frame(out$qc) %>%
dplyr::mutate(meds <- (mMed + uMed)/2) %>%
dplyr::mutate(bad = ifelse(meds < 10.5,'Fail','Pass'))
mingi.qc = data.frame(out$qc) %>%
dplyr::mutate(meds <- (mMed + uMed)/2) %>%
dplyr::mutate(bad = ifelse(meds < 10.5,'Fail','Pass'))
data.frame(out$qc)
data.frame(out$qc) %>%
dplyr::mutate(meds <- (mMed + uMed)/2)
minfi.qc = data.frame(out$qc) %>%
dplyr::mutate(meds = (mMed + uMed)/2) %>%
dplyr::mutate(bad = ifelse(meds < 10.5,'Fail','Pass'))
minfi.qc
sexinfo=c('F','F','F','M','M')
minfi.qc$truesex = sexinfo
minfi.qc
minfi.qc = data.frame(out$qc)
minfi.qc$truesex = sexinfo
minfi.qc = minfi.qc %>%
dplyr::mutate(meds = (mMed + uMed)/2) %>%
dplyr::mutate(bad = ifelse(meds < 10.5,'Fail','Pass'))
minfi.qc = minfi.qc %>%
dplyr::mutate(meds = (mMed + uMed)/2) %>%
dplyr::mutate(bad_methy = ifelse(meds < 10.5,'Fail','Pass')) %>%
dplyr::mutate(bad_sex = ifelse(predictedSex == truesex,'Pass','Fail'))
if (sum(minfi.qc$bad_methy=='Fail')>0 | sum(minfi.qc$bad_sex=='Fail')>0){
cat(paste(sum(minfi.qc$bad_methy=='Fail' | minfi.qc$bad_sex=='Fail'),'samples were identified as a bad sample.'))
kable(minfi.qc %>% filter(bad_methy=='Fail' | minfi.qc$bad_sex=='Fail'))
}
if (sum(minfi.qc$bad_methy=='Fail')>0 | sum(minfi.qc$bad_sex=='Fail')>0){
cat(paste(sum(minfi.qc$bad_methy=='Fail' | minfi.qc$bad_sex=='Fail'),'samples were identified as a bad sample.'))
knitr::kable(minfi.qc %>% filter(bad_methy=='Fail' | minfi.qc$bad_sex=='Fail'))
}
control_metrics(WB)
minfi.qc = minfi.qc %>%
dplyr::mutate(meds = (mMed + uMed)/2) %>%
dplyr::mutate(bad_methy = ifelse(meds < 10.5,'Fail','Pass')) %>%
dplyr::mutate(bad_sex = ifelse(predictedSex == truesex,'Pass','Fail')) %>%
mutate(inex=1:nrow(minfi.qc))
minfi.qc
if (sum(minfi.qc$bad_methy=='Fail')>0 | sum(minfi.qc$bad_sex=='Fail')>0){
cat(paste(sum(minfi.qc$bad_methy=='Fail' | minfi.qc$bad_sex=='Fail'),'samples were identified as a bad sample.'))
knitr::kable(minfi.qc %>% filter(bad_methy=='Fail' | minfi.qc$bad_sex=='Fail'))
}
summaryqc <- shinySummarize(WB)
#' Visualize qc with shinyMethyl
runShinyMethyl(summaryqc)
WB.noob <- preprocessNoob(WB)
cat('# Distribution of beta-values: before and after noob normalization\n')
#############FIGURE 1######################
#' Distribution of beta-values: before and after noob normalization
#+ fig.width=8, fig.height=6, dpi=300
#+
densityPlot(WB, main = "density plots before and after preprocessing", pal="#440154FF", ylim=c(0,4.5))
densityPlot(WB.noob, add = F, pal = "#FDE725FF")
# Add legend
legend("topleft", c("Noob","Raw"),
lty=c(1,1), title="Normalization",
bty='n', cex=1.3, col=c("#FDE725FF","#440154FF"))
cat('## Remove Bad/Failed Probe')
detect.p <- minfi::detectionP(WB, type = "m+u")
cat(paste(max(colSums(detect.p > 0.01))),'probes undetected per sample if we use 10^-2 cutoff\n')
cat(paste(max(colSums(detect.p > 0.000001))),'probes undetected per sample if we use 10^-6 cutoff\n')
# Barplot of the mean detection p-value by sample
#############FIGURE 2######################
#'Barplot of the mean detection p-value by sample
#'This tells us something (??) about the sample
barplot(colMeans(detect.p), col=rainbow(dim(detect.p)[2]), las=2, cex.names=0.7, main="Mean detection P by sample",cex.axis=0.8, ylim=c(0,7e-4))
detect.p[detect.p > probthresh] <- NA
probthresh=0.01
detect.p[detect.p > probthresh] <- NA
detect.p <- na.omit(detect.p)
intersect <- intersect(rownames(getAnnotation(WB)), rownames(detect.p))
cat(paste('Started with', nrow(getAnnotation(WB)), 'probes and', length(intersect),
' remaining if we use', probthresh,'as cutoff. Removed',nrow(getAnnotation(WB))-length(intersect),'probes',
round(100 - length(intersect)/nrow(getAnnotation(WB))*100,2), '%\n'))
#nrow(WB.noob)
WB.noob <- WB.noob[rownames(getAnnotation(WB.noob)) %in% intersect,]
nrow(WB.noob)
rm(intersect, detect.p); gc() # cleanup
cat('######################################################################\n')
cat('#####################Probe type adjustment############################\n')
cat('######################################################################\n')
#' Need to adjust for probe-type bias Infinium I (type I) and Infinium II (type II) probes
#' RCP with EnMix: Regression on Correlated Probes [Niu et al. Bioinformatics 2016](http://www.ncbi.nlm.nih.gov/pubmed/27153672)
betas.rcp <- rcp(WB.noob)
#' Need to adjust for probe-type bias Infinium I (type I) and Infinium II (type II) probes
#' RCP with EnMix: Regression on Correlated Probes [Niu et al. Bioinformatics 2016](http://www.ncbi.nlm.nih.gov/pubmed/27153672)
betas.rcp <- rcp(WB.noob)
library(ENmix)
#' Need to adjust for probe-type bias Infinium I (type I) and Infinium II (type II) probes
#' RCP with EnMix: Regression on Correlated Probes [Niu et al. Bioinformatics 2016](http://www.ncbi.nlm.nih.gov/pubmed/27153672)
betas.rcp <- rcp(WB.noob)
## Annotation of Infinium type for each probe (I vs II)
typeI <-   minfi::getProbeInfo(WB.noob,type="I")$Name
typeII <-  minfi::getProbeInfo(WB.noob,type="II")$Name
onetwo <- rep(1, nrow(betas.rcp))
onetwo[rownames(betas.rcp) %in% typeII] <- 2
cat('# Probe-type bias adjustment before and after RCP\n')
#+ fig.width=15, fig.height=7, dpi=300
par(mfrow=c(1,2)) # Side-by-side density distributions
densityPlot(WB.noob[rownames(getAnnotation(WB.noob)) %in% typeI,],pal = "#FDE725FF",main='Beta density',ylim=c(0,6.5))
densityPlot(WB.noob[rownames(getAnnotation(WB.noob)) %in% typeII,],add = F, pal = "#440154FF")
densityPlot(betas.rcp[rownames(getAnnotation(WB.noob)) %in% typeI,],pal = "#FDE725FF",main='Beta density probe-type adjusted',ylim=c(0,6.5))
densityPlot(betas.rcp[rownames(getAnnotation(WB.noob)) %in% typeII,],add = F, pal = "#440154FF")
legend("center", c("Infinium I","Infinium II"),
lty=c(1,1), title="Infinium type",
bty='n',col=c("#FDE725FF","#440154FF"))
#' notice that the type I and II peaks are more closely aligned after rcp adjustment
#' (particularly in the higher peak)
rm(onetwo, typeI, typeII)
cat('## Batch effects\n')
#' We will test 3 potential factors
pData(WB.noob)$Sentrix_ID <- unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][1]))
pData(WB.noob)$array_row <- substring(unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][2])),1,3) #Chip row
pData(WB.noob)$array_col <- substring(unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][2])),4,7) #Chip row #Chip position
#' ## Principal Component Analysis (PCA)
#' Calculate major sources of variability of DNA methylation using PCA
PCobject <- prcomp(t(betas.rcp), retx = T, center = T, scale. = T)
#' Extract the Principal Components from SVD
PCs <- PCobject$x
#' Is the major source of variability associated with position on chip?
summary(lm(PCs[, 1] ~ pData(WB.noob)$array_row)) #some effects w/row
summary(lm(PCs[, 1] ~ pData(WB.noob)$array_col)) #no effects w/col
menu(c("row", "col", 'both', 'none'), title="Which batch effect correction?")
oneway.test(PCs[, 1] ~ as.factor(pData(WB.noob)$Sentrix_ID)) #
oneway.test(PCs[, 1] ~ as.factor(pData(WB.noob)$array_row)) #
targetfile=targets[1:30,]
targetfile$Basename <- targetfile$idat_id#paste0(targets$sentrixbarcode, "_", targets$samplesection) # name of the files
WB <- read.metharray.exp(base=idatPath, targets=targetfile, verbose=T)
WB.noob <- preprocessNoob(WB)
cat('# Distribution of beta-values: before and after noob normalization\n')
#############FIGURE 1######################
#' Distribution of beta-values: before and after noob normalization
#+ fig.width=8, fig.height=6, dpi=300
#+
densityPlot(WB, main = "density plots before and after preprocessing", pal="#440154FF", ylim=c(0,4.5))
densityPlot(WB.noob, add = F, pal = "#FDE725FF")
# Add legend
legend("topleft", c("Noob","Raw"),
lty=c(1,1), title="Normalization",
bty='n', cex=1.3, col=c("#FDE725FF","#440154FF"))
cat('## Remove Bad/Failed Probe')
detect.p <- minfi::detectionP(WB, type = "m+u")
cat(paste(max(colSums(detect.p > 0.01))),'probes undetected per sample if we use 10^-2 cutoff\n')
cat(paste(max(colSums(detect.p > 0.000001))),'probes undetected per sample if we use 10^-6 cutoff\n')
# Barplot of the mean detection p-value by sample
#############FIGURE 2######################
#'Barplot of the mean detection p-value by sample
#'This tells us something (??) about the sample
barplot(colMeans(detect.p), col=rainbow(dim(detect.p)[2]), las=2, cex.names=0.7, main="Mean detection P by sample",cex.axis=0.8, ylim=c(0,7e-4))
detect.p[detect.p > probthresh] <- NA
detect.p <- na.omit(detect.p)
intersect <- intersect(rownames(getAnnotation(WB)), rownames(detect.p))
cat(paste('Started with', nrow(getAnnotation(WB)), 'probes and', length(intersect),
' remaining if we use', probthresh,'as cutoff. Removed',nrow(getAnnotation(WB))-length(intersect),'probes',
round(100 - length(intersect)/nrow(getAnnotation(WB))*100,2), '%\n'))
#nrow(WB.noob)
WB.noob <- WB.noob[rownames(getAnnotation(WB.noob)) %in% intersect,]
nrow(WB.noob)
rm(intersect, detect.p); gc() # cleanup
cat('######################################################################\n')
cat('#####################Probe type adjustment############################\n')
cat('######################################################################\n')
cat('# Need to adjust for probe-type bias Infinium I (type I) and Infinium II (type II) probes\n')
cat('# RCP with EnMix: Regression on Correlated Probes [Niu et al. Bioinformatics 2016](http://www.ncbi.nlm.nih.gov/pubmed/27153672)\n')
betas.rcp <- rcp(WB.noob)
cat('# note that this package takes beta values out of the minfi object - result is a matrix\n')
## Annotation of Infinium type for each probe (I vs II)
typeI <-   minfi::getProbeInfo(WB.noob,type="I")$Name
typeII <-  minfi::getProbeInfo(WB.noob,type="II")$Name
onetwo <- rep(1, nrow(betas.rcp))
onetwo[rownames(betas.rcp) %in% typeII] <- 2
cat('# Probe-type bias adjustment before and after RCP\n')
#+ fig.width=15, fig.height=7, dpi=300
par(mfrow=c(1,2)) # Side-by-side density distributions
densityPlot(WB.noob[rownames(getAnnotation(WB.noob)) %in% typeI,],pal = "#FDE725FF",main='Beta density',ylim=c(0,6.5))
densityPlot(WB.noob[rownames(getAnnotation(WB.noob)) %in% typeII,],add = F, pal = "#440154FF")
densityPlot(betas.rcp[rownames(getAnnotation(WB.noob)) %in% typeI,],pal = "#FDE725FF",main='Beta density probe-type adjusted',ylim=c(0,6.5))
densityPlot(betas.rcp[rownames(getAnnotation(WB.noob)) %in% typeII,],add = F, pal = "#440154FF")
legend("center", c("Infinium I","Infinium II"),
lty=c(1,1), title="Infinium type",
bty='n',col=c("#FDE725FF","#440154FF"))
#' notice that the type I and II peaks are more closely aligned after rcp adjustment
#' (particularly in the higher peak)
rm(onetwo, typeI, typeII)
cat('## Batch effects\n')
#' We will test 3 potential factors
pData(WB.noob)$Sentrix_ID <- unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][1]))
pData(WB.noob)$array_row <- substring(unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][2])),1,3) #Chip row
pData(WB.noob)$array_col <- substring(unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][2])),4,7) #Chip row #Chip position
#' ## Principal Component Analysis (PCA)
#' Calculate major sources of variability of DNA methylation using PCA
PCobject <- prcomp(t(betas.rcp), retx = T, center = T, scale. = T)
#' Extract the Principal Components from SVD
PCs <- PCobject$x
#' Is the major source of variability associated with position on chip?
#  summary(lm(PCs[, 1] ~ pData(WB.noob)$array_row)) #some effects w/row
#  summary(lm(PCs[, 1] ~ pData(WB.noob)$array_col)) #no effects w/col
oneway.test(PCs[, 1] ~ as.factor(pData(WB.noob)$Sentrix_ID)) #
oneway.test(PCs[, 1] ~ as.factor(pData(WB.noob)$array_row)) #
combatoption=menu(c("row", "col", 'both', 'none'), title="Which batch effect correction?")
combatoption
pData(WB.noob)$array_col
pData(WB.noob)
pData(WB.noob)$array_rowcol <- substring(unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][2])),1,7)
pData(WB.noob)$array_rowcol <- substring(unlist(lapply(colnames(WB.noob), function(ss)strsplit(ss,'_')[[1]][2])),1,7)
table( pData(WB.noob)$array_rowcol)
if (combatoption==1){
cat('only correct for rows.\n')
Mvals.ComBat <- ComBat(Mvals, batch = pData(WB.noob)$array_row)
}
library(sva)
if (combatoption==1){
cat('only correct for rows.\n')
Mvals.ComBat <- ComBat(Mvals, batch = pData(WB.noob)$array_row)
}
#' ComBat eBayes adjustment using a known variable of interest (here we use row)
Mvals <- log2(betas.rcp)-log2(1-betas.rcp)
combatoption=menu(c("row", "col", 'both', 'none'), title="Which batch effect correction?")
if (combatoption==1){
cat('only correct for rows.\n')
Mvals.ComBat <- ComBat(Mvals, batch = pData(WB.noob)$array_row)
}
if (combatoption==2){
cat('only correct for columns.\n')
Mvals.ComBat <- ComBat(Mvals, batch = pData(WB.noob)$array_col)
}
if (combatoption==3){
cat('both columns and raws\n')
Mvals.ComBat <- ComBat(Mvals, batch = pData(WB.noob)$array_rowcol)
}
if (combatoption==4){
cat('No position effect correction.\n')
Mvals.ComBat <- Mvals
}
betas.rcp <- 2^Mvals.ComBat/(1+2^Mvals.ComBat) # Convert M-values back to beta-values
#' PCA after removing batch effects
PC_post_correction <- prcomp(t(betas.rcp), retx = T, center = T, scale. = T)
PC1_post_correction <- PC_postcorrection$x
PC1_post_correction <- PC_post_correction$x
oneway.test(PC1_post_correction[, 1] ~ as.factor(pData(WB.noob)$Sentrix_ID)) #
table(pData(WB.noob)$Sentrix_ID)
#par(mfrow = c(1, 2))
boxplot(PC1_post_correction[, 1] ~ pData(WB.noob)$array_row, ylab = "PC1",las=2, main="Row",col=rainbow(8))
par(mfrow = c(1, 2))
boxplot(PC1_post_correction[, 1] ~ pData(WB.noob)$array_row, ylab = "PC1",las=2, main="Row",col=rainbow(8))
boxplot(PC1_post_correction[, 1] ~ pData(WB.noob)$array_col, ylab = "PC1",las=2, main="Column",col=rainbow(8))
#'By Beadchip
par(mfrow = c(1, 1))
boxplot(PC1_post_row_correction[, 1] ~ pData(WB.noob)$Sentrix_ID, ylab = "PC1",las=2, main="Chip",col=rainbow(8))
boxplot(PC1_post_correction[, 1] ~ pData(WB.noob)$Sentrix_ID, ylab = "PC1",las=2, main="Chip",col=rainbow(8))
#'By Beadchip
oneway.test(PC1_post_correction[, 1] ~ as.factor(pData(WB.noob)$Sentrix_ID)) #
table(pData(WB.noob)$Sentrix_ID)
par(mfrow = c(1, 1))
boxplot(PC1_post_correction[, 1] ~ pData(WB.noob)$Sentrix_ID, ylab = "PC1",las=2, main="Chip",col=rainbow(8))
chipmenu=menu(c("no","yes"), title="Batch correction for chips?")
document()
document()
document()
MSet <- preprocessRaw(WB)
idatPath <- "/Volumes/ALSPAC/EPI/EPI_methylation_rawdata_froam_ben_2019_12_20/idat" # path of the folder
targets <- readxl::read_excel("/Volumes/ALSPAC/EPI/EPI_methylation_rawdata_froam_ben_2019_12_20/monk_sample_450K_placenta.xlsx")
library(devtools)
library(roxygen2)
decoment()
document()
library(monklab.methyl)
library(monklab.methyl)
qc
library(monklab.methyl)
